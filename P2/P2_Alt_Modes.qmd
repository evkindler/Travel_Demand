---
title: "P2: Vehicle Availability"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

## Load libraries

This analysis uses the following packages:

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(here)
library(mlogit)
library(knitr)
library(caret)
```

## Load mlogit

```{r}
here("code",
     "mlogit_helpers.R") |>
  source()
```

## Load %!in% function

```{r}
'%!in%' <- function(x,y)!('%in%'(x,y))
```

## Load dataset

This analysis uses household-level data from the 2017 National Household Travel Survey.

```{r}
hh_data <- here("data",
                "NHTS",
                "hhpub.csv") |>
  read_csv(show_col_types = FALSE)
```

## Load person-level data

```{r}
person_data <- here("data",
                    "NHTS",
                    "perpub.csv") |>
  read_csv(show_col_types = FALSE)
```

## Choose variables

This model uses the TDM23 Structures and Performance report (<https://ctps.org/pub/tdm23_sc/tdm23.1.0/TDM23_Structures%20and%20Performance.pdf>) for details on the vehicle availability sub-model of the TDM23 model (beginning on page 65).

TDM23 predicts vehicle availability in one of three categories:

-   Zero vehicles

-   Insufficient vehicles (fewer vehicles than drivers)

-   Sufficient vehicles (at least as many vehicles as drivers)

I will use a similar outcome variable in my model.

I will follow this approach as closely as possible and include variables that examine usage of alternative modes.

## Load data

```{r}
hh_data <- hh_data |>
  select(WRKCOUNT,
         DRVRCNT,
         HHVEHCNT,
         HHSIZE,
         NUMADLT,
         HHFAMINC,
         HBPPOPDN,
         HOUSEID,
         BIKE,
         WALK,
         BUS,
         TRAIN)
```

I will need to use the following variables from the person file:

-   HOUSEID: A unique identifier for each household. We'll need to use this to match households to the data from the household-level dataset.

-   R_AGE: The person's age. We can use this to identify which household members are seniors (which we'll define as those older than 64).

-   WORKER: Whether the person is a worker.

-   DRIVER: Whether the person is a driver.

```{r}
person_data <- person_data |>
  select(HOUSEID,
         R_AGE,
         WORKER,
         DRIVER)
```

## Set Outcomes

Our vehicle availability outcome will be a categorical variable with three categories:

-   Zero vehicles

-   Insufficient vehicles (fewer vehicles than drivers)

-   Sufficient vehicles (at least as many vehicles as drivers)

```{r}
hh_data <- hh_data |>
  mutate(veh_avail = case_when(HHVEHCNT == 0 ~ "Zero",
                               DRVRCNT > HHVEHCNT ~ "Insuff.",
                               TRUE ~ "Suff."))
```

### Predictor: Number of children

The household dataset has the number of people and the number of adults in each household, so I can take the difference as the number of children.

```{r}
hh_data <- hh_data |>
  mutate(n_child = HHSIZE - NUMADLT)
```

### Predictor: Number of seniors

We can get the number of seniors in each household from the person file.

```{r, message=FALSE}
n_seniors <- person_data |>
  mutate(is_senior = R_AGE > 64) |>
  group_by(HOUSEID) |>
  summarise(n_seniors = sum(is_senior))

hh_data <- hh_data |>
  left_join(n_seniors)
```

### Predictor: Presence of third driver

We want a binary variable for whether there are more than two drivers.

```{r}
hh_data <- hh_data |>
  mutate(three_drivers = DRVRCNT > 2)
```

### Predictor: Number of drivers beyond two

And then for those households who do have more than two drivers, we want to know how many more they have.

```{r}
hh_data <- hh_data |>
  mutate(n_extra_drivers = ifelse(three_drivers, DRVRCNT - 2, 0))
```

### Predictor: Income

Low-income designation depends on both income and household size. All households with income more than \$125,000 are designated as high income.

```{r}
hh_data <- hh_data |>
  mutate(HHFAMINC = as.numeric(HHFAMINC)) |>
  filter(HHFAMINC > 0) |>
  mutate(income = case_when(HHFAMINC < 4 ~ "low",
                             HHFAMINC < 5 & HHSIZE > 1 ~ "low",
                             HHFAMINC < 6 & HHSIZE > 3 ~ "low",
                             HHFAMINC < 7 & HHSIZE > 5 ~ "low",
                             HHFAMINC < 8 & HHSIZE > 7 ~ "low",
                             HHFAMINC > 8 ~ "high",
                            TRUE ~ "medium")) |>
    mutate(income = factor(income, levels = c("medium", "low", "high")))
    
```

### Predictor: Non-worker driver

Is there anyone in the household who is a driver, but not a worker?

```{r}
non_work_driver <- person_data |>
  mutate(non_work_driver = WORKER == "02" & DRIVER == "01") |>
  group_by(HOUSEID) |>
  summarise(non_work_driver = max(non_work_driver))

hh_data <- hh_data |>
  left_join(non_work_driver)
```

### Predictor: Density

Density will be in one of three categories: High, medium, and low.

```{r}
hh_data <- hh_data |>
  filter(HBPPOPDN > 0) |>
  mutate(density = case_when(HBPPOPDN < 7000 ~ "Low",
                             HBPPOPDN < 10000 ~ "High",
                             TRUE ~ "Medium"))
```

### Predictor: Bike

Bike usage will be in one of three categories: daily, weekly, and rarely if ever.

```{r}
hh_data <- hh_data |>   
  mutate(bikes = case_when(
    BIKE == "01" ~ "Daily",
    BIKE == "02" ~ "Weekly",
    TRUE ~ "Rarely if Ever"))
```

### Predictor: Public Transit

Bus or train usage will be in one of three categories: daily, weekly, and rarely if ever.

```{r}
hh_data <- hh_data |>      
  mutate(rides_transit = case_when(
    BUS == "01" | TRAIN == "01" ~ "Daily",
    BUS == "02" | TRAIN == "02" ~ "Weekly",
    TRUE ~ "Rarely if Ever"))
```

### Predictor: Walk

Walking frequency will be in one of three categories: daily, weekly, and rarely if ever.

```{r}
hh_data <- hh_data |>   
  mutate(walks = case_when(
    WALK == "01" ~ "Daily",
    WALK == "02"~ "Weekly",
    TRUE ~ "Rarely if Ever"))
```

## Prepare data

### Drop the variables you won't be using

We'll keep only the variable we'll be including in our model.

```{r}
hh_data <- hh_data |>
  select(HOUSEID,
         veh_avail,
         WRKCOUNT,
         n_child,
         n_seniors,
         n_extra_drivers,
         three_drivers,
         non_work_driver,
         income,
         density,
         bikes,
         rides_transit,
         walks)

```

### Create training and test datasets

We will train the model on half of our sample and use the other half to test our model.

I'm setting a random number seed so that my randomly-selected variable will be the same every time.

```{r}
set.seed(3836308)

hh_data_train_ids <- sample(hh_data$HOUSEID, 
                        size = ceiling(nrow(hh_data)/2))

hh_data_train <- hh_data |>
  filter(HOUSEID %in% hh_data_train_ids)

hh_data_test <- hh_data |>
  filter(HOUSEID %!in% hh_data_train_ids)
```

### Create dfidx data

```{r}
veh_dfidx_train <- fn_make_dfidx(hh_data_train,
                                "HOUSEID",
                                "veh_avail")

veh_dfidx_test <- fn_make_dfidx(hh_data_test,
                                "HOUSEID",
                                "veh_avail")
```

## Estimate model

Now we can estimate our multinomial logistic regression using the `mlogit` function.

```{r}
model_veh <- mlogit(choice ~ 0 | 
                      WRKCOUNT +
                      n_child +
                      n_seniors +
                      n_extra_drivers +
                      three_drivers + 
                      non_work_driver +
                      income +
                      density +
                      bikes +
                      rides_transit +
                      walks | 0,
                           veh_dfidx_train,
                           reflevel = "Suff.")
```

And now we can take a look at the results of our model.

```{r}
summary(model_veh)
```

## Generate predictions and format output

```{r, message=FALSE}
predicts_test <- predict(model_veh, veh_dfidx_test) |>
  as.data.frame() |>
  rownames_to_column("HOUSEID") |>
  mutate(HOUSEID = as.numeric(HOUSEID)) |>
  left_join(hh_data_test)
```

## Checking model reliability and accuracy

First, I'll designate the alternative with the highest predicted probability as the "most likely" choice.

```{r}
predicts_test <- predicts_test |>
  mutate(most_likely = case_when((Suff. > Insuff.) & (Suff. > Zero) ~ "Suff.",
                                 (Zero > Insuff.) & (Zero > Suff.) ~ "Zero",
                                 TRUE ~ "Insuff.")) 
```

Now, I need to convert the `most_likely` and `veh_avail` variables from strings to factors in order for the next part to work.

```{r}
predicts_test <- predicts_test |>
  mutate(most_likely = factor(most_likely, 
                              levels = c("Suff.", "Insuff.", "Zero"))) |>
  mutate(veh_avail = factor(veh_avail,
                            levels = c("Suff.", "Insuff.", "Zero"))) |>
  mutate(correct = veh_avail == most_likely)


```

And now, I can use the `confusionMatrix` function to generate some accuracy and reliability statistics.

```{r}
confusionMatrix(data = predicts_test$most_likely,
                reference = predicts_test$veh_avail)
```
